# docker-compose.yml (Development)
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2 # Use a stable version
    container_name: zookeeper-dev
    networks:
      - microservices-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD-SHELL", "echo 'ruok' | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.2 # Match Zookeeper version branch
    container_name: kafka-dev
    networks:
      - microservices-network
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      # Optional: Expose for external tools if needed, but not required for inter-service comms
      # "9092:9092"
      - "29092:29092" # Exposed for host access if absolutely needed (e.g., local dev tool)
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-dev:2181'
      # Listeners: PLAINTEXT for internal Docker network, EXTERNAL for potential host access
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-dev:9092,EXTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # Dev setting
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0 # Dev setting
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1 # Dev setting
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1 # Dev setting
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1 # Dev setting
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 # Dev setting
      KAFKA_JMX_PORT: 9999 # Optional JMX
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" # Allow automatic topic creation for simplicity
    healthcheck:
      test: ["CMD-SHELL", "/usr/bin/kafka-topics --bootstrap-server kafka-dev:9092 --list || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1 # Use a specific recent version
    container_name: elasticsearch-dev
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # Disable security for simplicity (as requested)
      - ES_JAVA_OPTS=-Xms512m -Xmx512m # Adjust memory as needed
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data-dev:/usr/share/elasticsearch/data
    ports:
      - "9200:9200" # Expose ES API
      # - "9300:9300" # Transport - usually not needed externally
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s --fail http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  consul:
    image: hashicorp/consul:1.18
    container_name: consul-agent # Renamed for clarity vs prod
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    networks:
      - microservices-network
    command: "agent -dev -client=0.0.0.0 -ui -node=consul-dev-node"
    healthcheck:
      test: ["CMD", "consul", "info"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    build:
      context: ./api-gateway
    container_name: api-gateway-dev
    ports:
      - "3000:3000"
    networks:
      - microservices-network
    depends_on:
      consul:
        condition: service_healthy
      # Dependencies on services are less critical now due to discovery
      # but good for startup order logic
      auth-service:
        condition: service_started
      book-service:
        condition: service_started
      search-service: # Add dependency on the new service
        condition: service_started
    environment:
      PORT: 3000
      CONSUL_AGENT_HOST: consul-agent
      NODE_ENV: development
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./api-gateway/src
          target: /app/src
        - action: rebuild
          path: ./api-gateway/package.json
        - action: rebuild
          path: ./api-gateway/package-lock.json

  auth-service:
    build: ./auth-service
    container_name: auth-service-dev
    ports: # Optional external exposure
       - "3001:3001"
    depends_on:
      auth-db:
        condition: service_healthy
      consul:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres@auth-db:5432/auth_db?schema=public
      JWT_SECRET: your-secret-key-for-docker-dev # USE ENV VARS IN REAL PROD
      CONSUL_AGENT_HOST: consul-agent
      SERVICE_NAME: auth-service
      NODE_ENV: development
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./auth-service/src
          target: /app/src
        - action: sync
          path: ./auth-service/prisma/schema.prisma
          target: /app/prisma/schema.prisma
        - action: rebuild
          path: ./auth-service/package.json
        - action: rebuild
          path: ./auth-service/package-lock.json

  book-service:
    build: ./book-service
    container_name: book-service-dev
    ports: # Optional external exposure
      - "3002:3002"
    depends_on:
      book-db:
        condition: service_healthy
      auth-service:
        condition: service_started
      consul:
        condition: service_healthy
      kafka: # Depends on Kafka
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      PORT: 3002
      DATABASE_URL: postgresql://postgres:postgres@book-db:5432/book_db?schema=public
      CONSUL_AGENT_HOST: consul-agent
      SERVICE_NAME: book-service
      KAFKA_BROKERS: kafka-dev:9092 # Internal Kafka address
      NODE_ENV: development
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./book-service/src
          target: /app/src
        - action: sync
          path: ./book-service/prisma/schema.prisma
          target: /app/prisma/schema.prisma
        - action: rebuild
          path: ./book-service/package.json
        - action: rebuild
          path: ./book-service/package-lock.json

  search-service: # NEW Service Definition
    build: ./search-service
    container_name: search-service-dev
    ports: # Optional external exposure
      - "3003:3003"
    depends_on:
      consul:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      PORT: 3003
      CONSUL_AGENT_HOST: consul-agent
      SERVICE_NAME: search-service
      KAFKA_BROKERS: kafka-dev:9092
      ELASTICSEARCH_NODE: http://elasticsearch-dev:9200 # ES address within Docker
      NODE_ENV: development
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./search-service/src
          target: /app/src
        - action: rebuild
          path: ./search-service/package.json
        - action: rebuild
          path: ./search-service/package-lock.json

  auth-db:
    image: postgres:15-alpine
    container_name: auth-db-dev
    ports:
      - "5434:5432" # For external debugging access
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres # DEV ONLY
      POSTGRES_DB: auth_db
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d auth_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  book-db:
    image: postgres:15-alpine
    container_name: book-db-dev
    ports:
      - "5433:5432" # For external debugging access
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres # DEV ONLY
      POSTGRES_DB: book_db
    volumes:
      - book-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d book_db"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  microservices-network:
    driver: bridge

volumes:
  auth-db-data:
  book-db-data:
  es-data-dev: # Persistent volume for ES data